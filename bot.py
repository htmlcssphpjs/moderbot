# -*- coding: utf-8 -*-

import aiogram
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from models import db_session
from models.users import User

import re
import datetime
import string
import time
import json
import requests
import speech_recognition as speech_recog
import subprocess
import os

db_session.global_init('database.db')

bot_token = '<token>'

#bot = telebot.TeleBot(bot_token)
bot = Bot(token=bot_token)
dp = Dispatcher(bot)

GROUP_ID = -329119522  # ID –º–æ–µ–π –≥—Ä—É–ø–ø—ã

# —Å—á–∏—Ç–∞–µ–º –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
allwords = 1022
matwords = 92
filescan = 28
lastword = 'codeendmats'
usersid = '1218845111'
chatsid = ''
users = 14

def check_mats(message, text):
	global matwords, allwords
	with open("dist/mats.txt", encoding='utf-8') as openfile:
		mat = False
		part = ''
		word = ''
		text = text.lower()
		ntext = text.translate(str.maketrans('', '', string.punctuation)).lower()
		allwords += 1
		for line in openfile:
			for part in line.split():
				part = part.rstrip(',')
				if part == "codeendmats":
					if mat == True:
						if message.from_user.username != None:
							return 'ü§ê @' + message.from_user.username + '\n' + text
						else:
							return 'ü§ê ' + message.from_user.first_name + '\n' + text
					else:
						return False
					break
				for word in ntext.split():
					if word == part:
						text = text.replace(part, '‚ñì' * len(word), 1000)
						mat = True
						matwords += 1

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
	global users
	keyboard = types.InlineKeyboardMarkup()
	url_button = types.InlineKeyboardButton(
		text="üîó –°–æ–∑–¥–∞—Ç–µ–ª—å", url="https://t.me/vsecoder")
	keyboard.add(url_button)
	#
	iduser = message.from_user.id
	session = db_session.create_session()
	#
	user_all = session.query(User).all()
	T = True
	for all in user_all:
		if all.id == iduser:
			T = False

	if T:
		if message.from_user.username:
			session = db_session.create_session()
			name = message.from_user.first_name
			url = message.from_user.username
			iduser = message.from_user.id
			user = User(
				id=iduser,
				name=name,
				username='@'+url,
				carma=0
			)
			users += 1
			session.add(user)
			session.commit()
		else:
			session = db_session.create_session()
			name = message.from_user.first_name
			url = message.from_user.username
			iduser = message.from_user.id
			user = User(
				id=iduser,
				name=name,
				username='@...',
				carma=0
			)
			users += 1
			session.add(user)
			session.commit()

	await bot.send_message(message.chat.id, 'üôã–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —á–∞—Ç \n/help üë®‚Äçüíª–≤—ã–¥–∞—Å—Ç –≤–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é \n/info üïµÔ∏è‚Äç‚ôÇÔ∏è—Ä–∞—Å—Å–∫–∞–∂–µ—Ç –ø—Ä–æ –º–µ–Ω—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ', reply_markup=keyboard)

@dp.message_handler(commands=['help'])
async def send_help(message: types.Message):
	keyboard = types.InlineKeyboardMarkup()
	url_button = types.InlineKeyboardButton(
		text="üîó –î–æ–±–∞–≤–∏—Ç—å —Å–µ–±–µ", url="https://t.me/modermodBot?startgroup=0")
	keyboard.add(url_button)
	await bot.send_message(message.chat.id, 'üìù–î–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –º–æ–∂–Ω–æ –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ: \n1. –ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º \n2. –í—ã–±–µ—Ä–∏ —á–∞—Ç \n3. –í—ã–¥–∞–π –º–Ω–µ –ø—Ä–∞–≤–æ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π', reply_markup=keyboard)

@dp.message_handler(commands=['info', 'me'])
async def info(message: types.Message):
	await bot.send_chat_action(message.chat.id, 'typing')
	await bot.send_message(message.chat.id, '–ù—É —Ä–∞–∑ —Å–ø—Ä–æ—Å–∏–ª, —Ç–æ –≤ –º–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥—è—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ—É–Ω–∫—Ü–∏–π, '
                        '—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –º–∞—Ç—ã, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å—Ç–∞–≤–ª—é —Ü–µ–Ω–∑—É—Ä—É: \n'
                        '<b>–º–∞—Ç => ‚ñì‚ñì‚ñì</b>\n'
                        '–ò–∑ —ç—Ç–æ–≥–æ —è –≤–µ–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫(/stat –¥–ª—è –µ—ë –ø—Ä–æ—Å–º–æ—Ç—Ä–∞), –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ–≤–æ–∂—É –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç. ', parse_mode='html')

@dp.message_handler(commands=['newmat'])
async def neword(message: types.Message):
	if message.from_user.id == 1218845111:
		mt = message.text.replace('/newmat ', '')
		f1 = open('dist/mats.txt', 'r', encoding='utf-8')
		old = f1.read().replace(', codeendmats', '')
		f = open('dist/mats.txt', 'w', encoding='utf-8')
		f.write(old + ', ' + mt + ', codeendmats')
		await bot.send_message(message.chat.id, 'üìù–ù–æ–≤—ã–π –º–∞—Ç: ' + str(mt))
	else:
		mt = message.text.replace('/newmat ', '')
		await bot.send_message(message.chat.id, 'üë®‚Äçüîß–í—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å: ' + str(mt))
		await bot.send_message(1218845111, 'üë®‚Äçüîß–í–∞–º –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å: ' + str(mt))

@dp.message_handler(commands=['stat'])
async def statistic(message: types.Message):
	await bot.send_chat_action(message.chat.id, 'typing')
	await bot.send_message(
		message.chat.id, '<b>üìà–í—Å–µ–≥–æ —Å–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ:</b> <code>' + str(allwords) +
		'</code>\n<b>üìâ–°–ª–æ–≤ —Å –º–∞—Ç–∞–º–∏:</b> <code>' + str(matwords) +
		'</code>\n<b>üóÑ–§–∞–π–ª–æ–≤ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> <code>' + str(filescan) + '</code>\n' +
		'<b>üë®‚Äçüíº–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: </b><code>' + str(users) + '</code>', parse_mode='html')

@dp.message_handler(commands=['mute'])
async def mute(message: types.Message):
	try:
		info = await bot.get_chat_member(message.chat.id, message.from_user.id)
		if 'administrator' == str(info.status) or 'creator' == str(info.status):
			if message.reply_to_message.from_user.id != None:
				await bot.restrict_chat_member(
					message.chat.id, message.reply_to_message.from_user.id, until_date=time.time()+600)
				await bot.send_message(message.chat.id, 'ü§ê–ú—É—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç –æ—Å—É—â–µ—Å—Ç–≤–ª—ë–Ω!',
    	                            reply_to_message_id=message.message_id)
		else:
			await bot.send_message(message.chat.id, 'ü§ï–•–∞—Ö–∞, –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –ø–æ–ª—É—á–∏ –∏ –≤–æ–∑—Ä–∞—â–∞–π—Å—è',
    	                            reply_to_message_id=message.message_id)
	except:
		await bot.send_message(message.chat.id, 'ü§ï–Ø —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ –º–æ–≥—É —ç—Ç–æ...')

@dp.message_handler(commands=['r', 'report'])
async def report(message: types.Message):
	try:
		if message.text == '/report' or message.text == '/r' or not message.reply_to_message:
			await bot.send_message(message.chat.id, 'üìñ–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–µ–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—á–∞—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ /report spam|flud|18+ –∏–ª–∏ –¥—Ä—É–≥–æ–µ')
		else:
			members = await message.chat.get_member(message.reply_to_message.from_user.id)
			info = await bot.get_chat_member(message.chat.id, message.from_user.id)
			report = message.text.replace('/r ', '')
			report = report.replace('/report ', '')
			admins = await bot.get_chat_administrators('@' + message.chat.username)
			send = 0
			for admin in admins:
				if admin.user.username != 'modermodBot':
					try:
						await bot.send_message(admin.user.id, f'üì¨ –†–µ–ø–æ—Ä—Ç –ø–æ –ø—Ä–∏—á–∏–Ω–µ ' + str(report) + f'\nhttps://t.me/{message.chat.username}/{message.reply_to_message.message_id}')
					except:
						pass
					send += 1

			if send == 0:
				await bot.send_message(message.chat.id, 'üëÆ–ê–¥–º–∏–Ω—ã –Ω–µ –æ–ø–æ–≤–µ—â–µ–Ω—ã, –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–º —Ä–µ–ø–æ—Ä—Ç–æ–≤ –Ω–∞–¥–æ —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –º–µ–Ω—è –≤ –ª—Å!')
			else:
				await bot.send_message(message.chat.id, 'üëÆ–ê–¥–º–∏–Ω—ã –æ–ø–æ–≤–µ—â–µ–Ω—ã')
	except:
		pass

@dp.message_handler(commands=['rules'])
async def rules(message: types.Message):
	await bot.send_message(
		message.chat.id, '–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞: \n'
		'<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
		'\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
		'\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.'
		'\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
		'\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, —è –∏—Ö –ø–µ—Ä–µ–≤–µ–¥—É –≤ —Ç–µ–∫—Å—Ç.', parse_mode='html')

@dp.message_handler(content_types=["new_chat_members"])
async def newuser(message: types.Message):
	try:
		await bot.send_chat_action(message.chat.id, 'typing')
		if message.new_chat_members[0].username == 'modermodBot':
			await message.reply('üò≥ –û, —è –≤ —á–∞—Ç–µ! –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç, —è –Ω–æ–≤—ã–π –º–æ–¥–µ—Ä —ç—Ç–æ–≥–æ —á–∞—Ç–∞!')
		else:
			await message.reply(
				'üôã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —á–∞—Ç–µ, —è <b>–±–æ—Ç</b>, –∏ –≤–æ—Ç <u>–ø—Ä–∞–≤–∏–ª–∞</u> —á–∞—Ç–∞: \n'
				'<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
				'\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
				'\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.'
				'\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
				'\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, —è –∏—Ö –ø–µ—Ä–µ–≤–µ–¥—É –≤ —Ç–µ–∫—Å—Ç.', parse_mode='html')
	except BaseException as e:
		await bot.send_message(
			message.chat.id, 'üôã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤–∞—Å –≤ —á–∞—Ç–µ '
			', —è <b>–±–æ—Ç</b>, –∏ –≤–æ—Ç <u>–ø—Ä–∞–≤–∏–ª–∞</u> —á–∞—Ç–∞: \n'
			'<b> ¬∑ </b>–ù–µ –æ—Å–∫–æ—Ä–±–ª—è–π—Ç–µ –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π. –î–∞–≤–∞–π—Ç–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º—å—é–Ω–∏—Ç–∏, –∞ –Ω–µ —Ä—É–≥–∞—Ç—å—Å—è.'
			'\n<b> ¬∑ </b>–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É ‚Äî —Å—Ä–∞–∑—É —É–¥–∞–ª–∏—Ç—Å—è –±–æ—Ç–æ–º.'
			'\n<b> ¬∑ </b>–ù–µ–ª—å–∑—è —Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏, —Ç–æ–≤–∞—Ä—ã, —Å–∫–ª–∞–¥—á–∏–Ω—ã, –¥–∞–≤–∞—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã.'
			'\n<b> ¬∑ </b>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å —É–º–µ—Å—Ç–∏—Ç—å —Å–≤–æ—é –º—ã—Å–ª—å –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–∏–∫—Ç–æ –Ω–µ –ª—é–±–∏—Ç —Ñ–ª—É–¥.'
			'\n<b> ¬∑ </b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å —Ä–∞–∑—Ä–µ—à–µ–Ω—ã, —è –∏—Ö –ø–µ—Ä–µ–≤–µ–¥—É –≤ —Ç–µ–∫—Å—Ç.', parse_mode='html')

@dp.message_handler(content_types=["left_chat_member"])
async def leftuser(message: types.Message):
	await bot.send_chat_action(message.chat.id, 'typing')
	await bot.send_message(
		message.chat.id, 'üòû –≠—Ö... –º–∏–Ω—É—Å –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á–∞—Ç–∞...', parse_mode='html')

@dp.message_handler(content_types=['photo'])
async def photo_check(message: types.Message):
	global allwords, matwords, lastword
	try:
		if message.caption != None:
			censor = check_mats(message, message.caption)
			if censor:
				await bot.delete_message(message.chat.id, message.message_id)
				photoid = message.photo[-1].file_id
				await bot.send_photo(message.chat.id, photoid, caption=str(censor))
	except BaseException as e:
		await bot.send_message(1218845111, '–í —Å–∏—Å—Ç–µ–º–µ –æ—à–∏–±–∫–∞...\n<code>' + str(e) + '</code>', parse_mode='html')
		await bot.send_message(message.chat.id, '–£–ø—Å, –æ—à–∏–±–∫–∞...')

@dp.message_handler(content_types=["text"])
async def check(message: types.Message):
	global allwords, matwords, lastword, users
	try:
		if message.text == '@modermodBot':
			sti = open('dist/1.tgs', 'rb')
			await bot.send_sticker(message.chat.id, sti)
			await bot.send_message(message.chat.id, '–Ø!')
		elif message.text == "+":
			if message.from_user.id == message.reply_to_message.from_user.id:
				await message.reply("ü§® –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ.")
			else:
				mame = ''
				session = db_session.create_session()
				user_all = session.query(User).all()
				for user in user_all:
					if user.id == message.reply_to_message.from_user.id:
						user.carma += 1
						name = user.name

				session.commit()
				await message.reply('‚úèÔ∏è–í—ã –ø–æ–≤—ã—Å–∏–ª–∏ –∫–∞—Ä–º—É ' + str(name))
		elif message.text == "-":
			if message.from_user.id == message.reply_to_message.from_user.id:
				await message.reply("ü§® –ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∫–∞—Ä–º—É —Å–∞–º–æ–º—É —Å–µ–±–µ.")
			else:
				mame = ''
				session = db_session.create_session()
				user_all = session.query(User).all()
				for user in user_all:
					if user.id == message.reply_to_message.from_user.id:
						user.carma -= 1
						name = user.name

				session.commit()
				await message.reply('‚úèÔ∏è–í—ã –ø–æ–Ω–∏–∑–∏–ª–∏ –∫–∞—Ä–º—É ' + str(name))
		elif message.text == '–ö–∞—Ä–º–∞':
			carma = 0
			session = db_session.create_session()
			user_all = session.query(User).all()
			for user in user_all:
				if user.id == message.from_user.id:
					carma = user.carma

			await message.reply('‚úèÔ∏è–í–∞—à–∞ –∫—Ä–∞–º–∞: ' + str(carma))
			session.commit()
		else:
			censor = check_mats(message, message.text)
			if censor:
				await bot.delete_message(message.chat.id, message.message_id)
				await bot.send_message(message.chat.id, str(censor))

		#
		iduser = message.from_user.id
		session = db_session.create_session()
		#
		user_all = session.query(User).all()
		T = True
		for all in user_all:
			if all.id == iduser:
				T = False

		if T:
			if message.from_user.username:
				session = db_session.create_session()
				name = message.from_user.first_name
				url = message.from_user.username
				iduser = message.from_user.id
				user = User(
                    id=iduser,
                    name=name,
                    username='@'+url,
                    carma=0
                )
				users += 1
				session.add(user)
				session.commit()
			else:
				session = db_session.create_session()
				name = message.from_user.first_name
				url = message.from_user.username
				iduser = message.from_user.id
				user = User(
                     id=iduser,
                     name=name,
                     username='@...',
                     carma=0
                )
				users += 1
				session.add(user)
				session.commit()
	except BaseException as e:
		await bot.send_message(1218845111, '–í —Å–∏—Å—Ç–µ–º–µ –æ—à–∏–±–∫–∞...\n<code>' + str(e) + '</code>', parse_mode='html')
		await bot.send_message(message.chat.id, '–£–ø—Å, –æ—à–∏–±–∫–∞...')

@dp.message_handler(content_types=['document'])
async def file_handler(message: types.Message):
	global filescan, allwords, matwords, lastword
	try:
		if message.caption != None:
			censor = check_mats(message, message.caption)
			if censor:
				await bot.delete_message(message.chat.id, message.message_id)
				photoid = message.document.file_id
				await bot.send_document(message.chat.id, photoid, caption=str(censor))
		url_file_scan = 'https://www.virustotal.com/vtapi/v2/file/scan'
		params = dict(
			apikey='<token>')
		file_upload_id = await bot.get_file(message.document.file_id)
		url_upload_file = "https://api.telegram.org/file/bot{}/{}".format(
			bot_token, file_upload_id.file_path)
		recvfile = requests.get(url_upload_file)
		files = dict(file=(recvfile.content))
		response_file_scan = requests.post(url_file_scan, files=files, params=params)
		if response_file_scan.json()['response_code'] == 1:
			await bot.send_message(message.chat.id, "üìé <a href='" + response_file_scan.json()['permalink'] + "'>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</a> –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ–º —Ñ–∞–π–ª–µ", parse_mode='html')
		else:
			await bot.send_message(message.chat.id, response_file_scan.json()['verbose_msg'])
		filescan += 1
	except BaseException as e:
		await bot.send_message(1218845111, '–í —Å–∏—Å—Ç–µ–º–µ –æ—à–∏–±–∫–∞...\n<code>' + str(e) + '</code>', parse_mode='html')
		await bot.send_message(message.chat.id, 'üß©–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –≤–∏—Ä—É—Å—ã')

@dp.message_handler(content_types=['voice'])
async def repeat_all_message(message):
	try:
		os.remove("dist/voice.wav")
	except BaseException as e:
		pass

	await bot.send_chat_action(message.chat.id, 'typing')

	file_info = await bot.get_file(message.voice.file_id)
	file = requests.get(
		'https://api.telegram.org/file/bot{0}/{1}'.format(bot_token, file_info.file_path))

	#await bot.send_message(message.chat.id, 'üìù–ó–∞–ø–∏—Å—å')
	with open('dist/voice.ogg', 'wb') as f:
		f.write(file.content)

	src_filename = 'dist/voice.ogg'
	dest_filename = 'dist/voice.wav'

	#await bot.send_message(message.chat.id, 'üìÑ–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è')

	process = subprocess.run(['ffmpeg', '-i', src_filename, dest_filename])
	process.returncode = 1

	# speech_recog
	#await bot.send_message(message.chat.id, 'üìÉ–û–±—Ä–∞–±–æ—Ç–∫–∞')
	sample_audio = speech_recog.AudioFile('dist/voice.wav')
	recog = speech_recog.Recognizer()
	with sample_audio as audio_file:
		audio_content = recog.record(audio_file)
	data = recog.recognize_google(audio_content, language='ru-RU')

	text = data

	if message.from_user.username != None:
		await message.reply('üó£ @' + message.from_user.username + '\n' + str(text))
	else:
		await message.reply('üó£ ' + message.from_user.first_name + '\n' + str(text))
	try:
		os.remove("dist/voice.wav")
	except BaseException as e:
		print(e)
	finally:
		pass
#
if __name__ == "__main__":
	executor.start_polling(dp)
